---
/**
 * TagCloud.astro – Builds the word cloud from:
 *  - Content collection (src/content/pages/**)
 *  - Route pages (src/pages/**) that export `pageTags`
 *
 * Drop this near the bottom of Home.
 */
import { getCollection } from "astro:content";

const { maxTags = 60, seed = "flush", minSize = 0.9, maxSize = 1.9 } = Astro.props;

// 1) Collect tags from content collection
const entries = await getCollection("pages");
const counts = new Map<string, number>();
for (const e of entries) {
  (e.data.tags || []).forEach((t: string) => {
    const key = String(t).toLowerCase().trim();
    if (!key) return;
    counts.set(key, (counts.get(key) || 0) + 1);
  });
}

// 2) Collect tags from route pages that export `pageTags`
const routeMods = import.meta.glob("../pages/**/*.astro", { eager: true }) as Record<string, any>;
for (const [path, mod] of Object.entries(routeMods)) {
  // ignore templates and tag-archive pages themselves
  if (path.includes("/pages/tags/") || path.includes("/pages/content/")) continue;

  const arr = (mod?.pageTags || mod?.tags || []) as unknown[];
  for (const t of arr) {
    const key = String(t).toLowerCase().trim();
    if (!key) continue;
    counts.set(key, (counts.get(key) || 0) + 1);
  }
}

const items = [...counts.entries()].sort((a, b) => b[1] - a[1]).slice(0, maxTags);

// Seeded RNG for stable rotation/weight
function hash(s: string){let h=2166136261>>>0;for(let i=0;i<s.length;i++){h^=s.charCodeAt(i);h=Math.imul(h,16777619);}return h>>>0;}
function rngFor(k: string){let x=(hash(seed+"|"+k)||1)>>>0;return ()=>{x^=x<<13;x>>>=0;x^=x>>17;x>>>=0;x^=x<<5;x>>>=0;return (x>>>0)/0xffffffff;};}

const maxCount = items.length ? Math.max(...items.map(([,c])=>c)) : 1;
const minCount = items.length ? Math.min(...items.map(([,c])=>c)) : 1;

// Map each tag to responsive font-size (rem + vw) and font-weight.
// Removes transform scale() to keep text pixel‑crisp on large/HiDPI screens.
const cloud = items.map(([tag, c]) => {
  const pct = (c - minCount) / Math.max(1, (maxCount - minCount)); // 0..1

  // Size range; tune if needed (kept close to your original min/max intent)
  const remMin = 0.9, remMax = 1.9;
  const vwMin  = 0.20, vwMax  = 1.20;

  const rem = +(remMin + (remMax - remMin) * pct).toFixed(3);
  const vw  = +(vwMin  + (vwMax  - vwMin)  * pct).toFixed(3);

  const rnd = rngFor(tag);
  const rot = Math.round((rnd()*20 - 10) * 10) / 10;              // -10..+10 deg
  const weight = rnd() > 0.66 ? 700 : 600;                         // bold range

  return { tag, rem, vw, rot, weight };
});
---
<section class="cloud-wrap" aria-label="Tags cloud">
  <h3>Find site content by tags</h3>
  <div class="cloud">
    {cloud.map((t) => (
      <a
        href={`/tags/${encodeURIComponent(t.tag)}/`}
        class="cloud-tag"
        style={`--rot:${t.rot}deg; --w:${t.weight}; font-size: clamp(${t.rem}rem, ${t.vw}vw, ${t.rem + 0.6}rem);`}
      >
        {t.tag}
      </a>
    ))}
    {cloud.length === 0 && <p class="muted">No tags yet.</p>}
  </div>
</section>

<style>
  .cloud-wrap { margin: 1.5rem 0 2rem; }
  .muted { opacity:.8; }
  .cloud { display:flex; flex-wrap:wrap; gap:.35rem .6rem; align-items:center; }

  .cloud-tag {
    display:inline-block;
    transform: rotate(var(--rot));            /* no scale → crisp text */
    transform-origin:center;
    font-family:"Oswald", Impact, Haettenschweiler, "Arial Narrow Bold", sans-serif;
    font-weight:var(--w);
    line-height:1;
    color:var(--flush-light);
    letter-spacing:.5px;
    text-transform:uppercase;
    text-decoration:none;
    transition: color .12s ease, text-shadow .12s ease;
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
  }
  .cloud-tag:hover {
    color:var(--flush-yellow);
    text-shadow:0 2px 0 rgba(0,0,0,.35);
  }
</style>

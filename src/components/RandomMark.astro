---
/**
 * RandomMark.astro
 * One subtle centered SVG mark chosen on EACH page load.
 *
 * Priority:
 *   1) src/assets/marks/hero/*.svg   (curated)
 *   2) src/assets/marks/*.svg        (fallback)
 *   3) built-in data-URI placeholder (last-resort)
 *
 * Fully static: no external requests; works on Netlify static.
 */
const heroMods = import.meta.glob("../assets/marks/hero/*.svg", {
  import: "default",
  query: "?url",
  eager: true,
});
const allMods = import.meta.glob("../assets/marks/*.svg", {
  import: "default",
  query: "?url",
  eager: true,
});
const heroUrls = Object.values(heroMods) as string[];
const allUrls = Object.values(allMods) as string[];
const candidateUrls = heroUrls.length ? heroUrls : allUrls;

// Safe built-in placeholder (simple white squiggle)
const PLACEHOLDER = `data:image/svg+xml;utf8,` + encodeURIComponent(
  `<svg xmlns="http://www.w3.org/2000/svg" width="600" height="600" viewBox="0 0 600 600">
     <path d="M70 520 L300 100 L530 520" fill="none" stroke="#ffffff" stroke-width="32" stroke-linecap="round"/>
   </svg>`
);
---

<div class="rm" aria-hidden="true">
  <div class="rm__bg"></div>
</div>

<script type="module" data-urls={JSON.stringify(candidateUrls)} data-fallback={PLACEHOLDER}>
  const urls = JSON.parse(document.currentScript.dataset.urls || "[]");
  const fallback = document.currentScript.dataset.fallback;
  const root = document.currentScript.previousElementSibling;
  const bg = root?.querySelector(".rm__bg");
  if (!bg) export {};

  // Pick on every page load (client-side)
  const pick = (list) => list[Math.floor(Math.random() * list.length)];
  const chosen = Array.isArray(urls) && urls.length ? pick(urls) : fallback;

  bg.style.backgroundImage = `url(${chosen})`;
</script>

<style>
  .rm {
    position: relative;
    display: grid;
    place-items: center;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }
  .rm__bg {
    width: min(60vmin, 760px);
    height: min(60vmin, 760px);
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    /* Subtle white look; always below text */
    filter: grayscale(1) brightness(8);
    opacity: 0.28;
  }
</style>

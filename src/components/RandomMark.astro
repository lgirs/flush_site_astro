---
/**
 * RandomMark.astro
 * One subtle, centered mark chosen on EACH page load (client-side).
 *
 * Priority:
 *   1) src/assets/marks/hero/*.svg   (curated)
 *   2) src/assets/marks/*.svg        (fallback)
 *   3) built-in data-URI placeholder (never leaves the hero empty)
 */
const heroMods = import.meta.glob("../assets/marks/hero/*.svg", {
  import: "default",
  query: "?url",
  eager: true,
});
const allMods = import.meta.glob("../assets/marks/*.svg", {
  import: "default",
  query: "?url",
  eager: true,
});
const heroUrls = Object.values(heroMods) as string[];
const allUrls = Object.values(allMods) as string[];
const candidateUrls = heroUrls.length ? heroUrls : allUrls;

const PLACEHOLDER = `data:image/svg+xml;utf8,${encodeURIComponent(
  `<svg xmlns='http://www.w3.org/2000/svg' width='600' height='600' viewBox='0 0 600 600'>
     <path d='M70 520 L300 100 L530 520' fill='none' stroke='#ffffff' stroke-width='32' stroke-linecap='round'/>
   </svg>`
)}`;
---

<div
  class="rm"
  aria-hidden="true"
  data-urls={JSON.stringify(candidateUrls)}
  data-fallback={PLACEHOLDER}
>
  <div class="rm__bg"></div>
</div>

<!-- Tiny inline script; runs on each page load and sets one random URL -->
<script is:inline>
  (() => {
    const roots = document.querySelectorAll('.rm[data-urls]');
    roots.forEach((root) => {
      try {
        const json = root.getAttribute('data-urls') || '[]';
        const fallback = root.getAttribute('data-fallback') || '';
        const urls = JSON.parse(json);
        const pick = (arr) => arr[Math.floor(Math.random() * arr.length)];
        const choice = Array.isArray(urls) && urls.length ? pick(urls) : fallback;
        const bg = root.querySelector('.rm__bg');
        if (bg && choice) bg.style.backgroundImage = `url(${choice})`;
      } catch (e) {
        // last-resort fallback
        const bg = root.querySelector('.rm__bg');
        const fb = root.getAttribute('data-fallback');
        if (bg && fb) bg.style.backgroundImage = `url(${fb})`;
      }
    });
  })();
</script>

<style>
  .rm {
    position: relative;
    display: grid;
    place-items: center;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }
  .rm__bg {
    width: min(60vmin, 760px);
    height: min(60vmin, 760px);
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    /* subtle white-ink look, never fights title */
    filter: grayscale(1) brightness(8);
    opacity: 0.24;
  }
</style>

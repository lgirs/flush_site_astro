---
/**
 * RandomMark.astro
 * One subtle, centered mark chosen on EACH page load (client-side).
 *
 * Priority:
 *   1) src/assets/marks/hero/*.svg   (curated)
 *   2) src/assets/marks/*.svg        (fallback)
 *   3) built-in data-URI placeholder (never leaves the hero empty)
 */
const heroMods = import.meta.glob("../assets/marks/hero/*.svg", {
  import: "default",
  query: "?url",
  eager: true,
});
const allMods = import.meta.glob("../assets/marks/*.svg", {
  import: "default",
  query: "?url",
  eager: true,
});

const heroUrls = Object.values(heroMods) as string[];
const allUrls = Object.values(allMods) as string[];
const candidateUrls = (heroUrls.length ? heroUrls : allUrls) as string[];

const PLACEHOLDER = `data:image/svg+xml;utf8,${encodeURIComponent(
  "<svg xmlns='http://www.w3.org/2000/svg' width='600' height='600' viewBox='0 0 600 600'><path d='M70 520 L300 100 L530 520' fill='none' stroke='#ffffff' stroke-width='32' stroke-linecap='round'/></svg>"
)}`;

const urlsAttr = JSON.stringify(candidateUrls);
---

<div class="rm" aria-hidden="true" data-urls={urlsAttr} data-fallback={PLACEHOLDER}>
  <div class="rm__bg"></div>
</div>

<script is:inline>
  (function () {
    var roots = document.querySelectorAll('.rm[data-urls]');
    roots.forEach(function (root) {
      try {
        var json = root.getAttribute('data-urls') || '[]';
        var fallback = root.getAttribute('data-fallback') || '';
        var urls = JSON.parse(json);
        var pick = function (arr) { return arr[Math.floor(Math.random() * arr.length)]; };
        var choice = (Array.isArray(urls) && urls.length) ? pick(urls) : fallback;
        var bg = root.querySelector('.rm__bg');
        if (bg && choice) { bg.style.backgroundImage = 'url(' + choice + ')'; }
      } catch (e) {
        var bg2 = root.querySelector('.rm__bg');
        var fb = root.getAttribute('data-fallback');
        if (bg2 && fb) { bg2.style.backgroundImage = 'url(' + fb + ')'; }
      }
    });
  })();
</script>

<style>
  .rm {
    position: relative;
    display: grid;
    place-items: center;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }
  .rm__bg {
    width: min(60vmin, 760px);
    height: min(60vmin, 760px);
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    filter: grayscale(1) brightness(8);
    opacity: 0.24;
  }
</style>

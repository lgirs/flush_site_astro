---
/**
 * RandomMark.astro
 * One subtle, centered vector for the hero.
 *
 * Curated source (preferred):  src/assets/marks/hero/*.svg
 * Fallback source:             src/assets/marks/*.svg
 *
 * Action for repo: put ONLY the clean hero shapes into src/assets/marks/hero/
 */
const heroModules = import.meta.glob("../assets/marks/hero/*.svg", {
  import: "default",
  query: "?url",
  eager: true,
});
const fallbackModules = import.meta.glob("../assets/marks/*.svg", {
  import: "default",
  query: "?url",
  eager: true,
});

// Prefer curated hero set; otherwise fallback to everything
const heroUrls = Object.values(heroModules) as string[];
const allUrls = Object.values(fallbackModules) as string[];
const source = heroUrls.length ? heroUrls : allUrls;

const pick = (arr: string[]) => arr[Math.floor(Math.random() * arr.length)];
const choice = source.length ? pick(source) : null;

// Light randomization to avoid sameness (rotation, scale)
const rot = Math.floor(Math.random() * 360);
const scale = 0.9 + Math.random() * 0.25; // 0.9â€“1.15
---

{choice && (
  <div
    class="rm"
    aria-hidden="true"
    style={`--rm-url: url('${choice}'); --rm-rot: ${rot}deg; --rm-scale: ${scale}`}
  >
    <div class="rm__bg" />
  </div>
)}

{!choice && (
  <div class="rm rm--empty" aria-hidden="true"></div>
)}

<style>
  .rm {
    position: relative;
    display: grid;
    place-items: center;
    width: 100%;
    height: 100%;
  }

  /* The visible vector (background-image on a sized block) */
  .rm__bg {
    width: min(60vmin, 760px);
    height: min(60vmin, 760px);
    background-image: var(--rm-url);
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    /* subtle + white: */
    filter: grayscale(1) brightness(8);
    opacity: 0.25;
    transform: rotate(var(--rm-rot)) scale(var(--rm-scale));
    will-change: transform;
  }

  /* Empty state takes no space but keeps layout safe */
  .rm--empty { width: 0; height: 0; }
</style>

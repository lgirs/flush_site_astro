---
import BaseLayout from "../layouts/BaseLayout.astro";
import TagCloud from "../components/TagCloud.astro";

export const pageTitle = "Home (Random Side-by-Side)";
export const pageTags = ["Home", "Experiment"];

const MARKS = [
  "/images/marks/shit.svg",
  "/images/marks/burn.svg",
  "/images/marks/head.svg",
  "/images/marks/control.svg",
  "/images/marks/insane.svg",
  "/images/marks/wisdom.svg",
  "/images/marks/owl.svg",
  "/images/marks/clock.svg",
  "/images/marks/us.svg",
  "/images/marks/join me.svg",
];
---
<BaseLayout title="Home (Random Side-by-Side)" description="Hidden: logo left, random vector right">
  <meta name="robots" content="noindex,nofollow" />

  <!-- HERO -->
  <section class="hero" aria-label="Flush">
    <div class="hero__inner" style="--mx:1100px; --px:1rem;">
      <div class="hero__grid">
        <!-- Left: logo -->
        <img
          src="/images/logo-flush-white-orange_vex.png"
          alt="Flush"
          class="hero__logo"
          loading="eager"
        />

        <!-- Right: random vector (masked white) with <img> fallback -->
        <div class="hero__art">
          <span class="hero__mark" aria-hidden="true"></span>
          <img class="hero__markImg" alt="" aria-hidden="true" />
        </div>
      </div>
    </div>
  </section>

  <!-- INTRO COPY -->
  <section class="intro long-text">
    <p>We make loud, honest music. The words come from real life â€” shows, friends, late nights, and staying true to what matters.</p>
    <p>Dig in below: explore by tags, watch videos, or jump to the latest stories.</p>
  </section>

  <!-- TAG CLOUD -->
  <TagCloud />

  <script is:inline>
    // pick one SVG each load
    (function () {
      const marks = [
        "/images/marks/shit.svg",
        "/images/marks/burn.svg",
        "/images/marks/head.svg",
        "/images/marks/control.svg",
        "/images/marks/insane.svg",
        "/images/marks/wisdom.svg",
        "/images/marks/owl.svg",
        "/images/marks/clock.svg",
        "/images/marks/us.svg",
        "/images/marks/join me.svg",
      ];
      const pick = (arr) => arr[Math.floor(Math.random() * arr.length)];
      const chosen = pick(marks);

      const maskEl = document.querySelector(".hero__mark");
      if (maskEl) {
        maskEl.style.setProperty("--img", `url('${encodeURI(chosen)}')`);
        maskEl.classList.add("is-ready");
      }
      const fallbackEl = document.querySelector(".hero__markImg");
      if (fallbackEl) fallbackEl.src = chosen;
    })();
  </script>

  <style>
    /* Section + shared container (matches header width/padding) */
    .hero { background: var(--flush-black); padding-block: clamp(2.2rem, 6vw, 5.5rem); }
    .hero__inner {
      max-width: var(--mx);
      margin-inline: auto;
      padding-inline: var(--px);
    }

    /* Grid:
       - mobile: 1 column, centered
       - desktop: 2 columns sized to their content and centered as a group
    */
    .hero__grid {
      display: grid;
      align-items: center;
      justify-items: center;
      gap: clamp(1rem, 4vw, 2.5rem);
      grid-template-columns: 1fr;
    }
    @media (min-width: 900px) {
      .hero__grid {
        grid-template-columns: max-content max-content;
        justify-content: center; /* center the pair as a group */
      }
    }

    /* Left column: logo (cap at ~320px on desktop) */
    .hero__logo {
      width: min(48vw, 360px);
      height: auto;
      display: block;
      filter: drop-shadow(0 6px 14px rgba(0,0,0,.45));
    }
    @media (min-width: 900px) {
      .hero__logo { width: min(28vw, 320px); }
    }

    /* Right column: vector wrapper */
    .hero__art { display: grid; place-items: center; }

    /* Masked vector (Flush white) */
    .hero__mark {
      display: none; /* shown when JS sets URL */
      width: min(84vw, 560px);
      height: auto;
      aspect-ratio: 16 / 10;            /* tweak if your marks are taller/shorter */
      background: var(--flush-light);   /* tint to brand "white" */
      filter: drop-shadow(0 8px 18px rgba(0,0,0,.35));
      opacity: 0.96;

      -webkit-mask-image: var(--img);
      mask-image: var(--img);
      -webkit-mask-repeat: no-repeat; mask-repeat: no-repeat;
      -webkit-mask-position: center;   mask-position: center;
      -webkit-mask-size: contain;      mask-size: contain;
    }
    .hero__mark.is-ready { display: block; }

    /* Fallback image (hidden when mask is supported) */
    .hero__markImg {
      display: block;
      width: min(84vw, 560px);
      height: auto;
      filter: drop-shadow(0 8px 18px rgba(0,0,0,.35));
      opacity: 0.96;
    }
    @supports (mask-image: url("")) or (-webkit-mask-image: url("")) {
      .hero__markImg { display: none; }
    }
    @media (min-width: 900px) {
      .hero__mark, .hero__markImg { width: min(40vw, 560px); }
    }

    /* Intro text */
    .intro {
      max-width: 760px;
      margin: 1.5rem auto 1rem;
      padding-inline: 1rem;
      color: var(--flush-light);
    }
    .intro a { color: var(--flush-red); text-decoration: none; }
    .intro a:hover { color: var(--flush-yellow); }
  </style>
</BaseLayout>

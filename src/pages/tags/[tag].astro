---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { slugifyTag } from "../../utils/slugifyTag";

function pathToUrl(key: string) {
  let p = key.replace(/^(\.\.\/)+pages/i, "");
  if (!p.startsWith("/")) p = "/" + p;
  p = p.replace(/\.astro$/i, "");
  p = p.replace(/\/{2,}/g, "/");
  if (p === "/index") return "/";
  if (p.endsWith("/index")) p = p.slice(0, -("/index".length));
  if (!p.endsWith("/")) p = p + "/";
  return p;
}

// Build all tag pages (tags discovered from content + route pages)
export async function getStaticPaths() {
  const entries = await getCollection("pages");
  const tagSet = new Set<string>();

  // 1. Get tags from MDX content
  for (const e of entries) {
    (e.data.tags || []).forEach((t) => tagSet.add(slugifyTag(t)));
  }

  // 2. Get tags from .astro pages
  const routeMods = import.meta.glob("../../pages/**/*.astro", { eager: true }) as Record<string, any>;
  for (const [path, mod] of Object.entries(routeMods)) {
    if (path.includes("/pages/tags/") || path.includes("/pages/content/")) continue;
    const arr = (mod?.pageTags || mod?.tags || []) as unknown[];
    arr?.forEach((t) => {
      const key = slugifyTag(String(t || ""));
      if (key) tagSet.add(key);
    });
  }

  return Array.from(tagSet).map((tag) => ({ params: { tag }, props: { tag } }));
}

const { tag } = Astro.props as { tag: string };

// Gather matches from content collection
const allContent = await getCollection("pages");
const matchesContent = allContent
  .filter((p) => (p.data.tags || []).map(slugifyTag).includes(tag))
  .map((p) => ({ 
    title: p.data.tagPageTitle ?? p.data.title ?? p.slug, 
    url: `/content/${p.slug}/` 
  }));

// Gather matches from route pages
const routeMods = import.meta.glob("../../pages/**/*.astro", { eager: true }) as Record<string, any>;
const matchesRoutes: { title: string; url: string }[] = [];
for (const [path, mod] of Object.entries(routeMods)) {
  if (path.includes("/pages/tags/") || path.includes("/pages/content/")) continue;
  const arr = (mod?.pageTags || mod?.tags || []) as unknown[];
  const has = arr?.some((t) => slugifyTag(String(t || "")) === tag);
  if (!has) continue;
  const title = String(mod?.tagPageTitle || mod?.pageTitle || mod?.title || pathToUrl(path)).trim();
  const url = pathToUrl(path);
  matchesRoutes.push({ title, url });
}

const items = [...matchesContent, ...matchesRoutes];
---
<BaseLayout title={`#${tag}`} description={`Pages tagged ${tag}`}>
  {items.length === 1 ? (
    <>
      <meta http-equiv="refresh" content={`0; url=${items[0].url}`} />
      <p>Redirecting to <a href={items[0].url}>{items[0].title}</a>â€¦</p>
    </>
  ) : (
    <>
      <h1>#{tag}</h1>
      {items.length === 0 ? (
        <p>No pages yet.</p>
      ) : (
        <ul class="tag-list">
          {items.map((it) => (
            <li><a href={it.url}>{it.title}</a></li>
          ))}
        </ul>
      )}
    </>
  )}
</BaseLayout>

<style>
  .tag-list li a {
    color: var(--flush-light);
  }
  .tag-list li a:hover {
    color: var(--flush-yellow);
  }
</style>
